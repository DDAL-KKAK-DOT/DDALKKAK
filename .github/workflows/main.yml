name: Create branch & open PR on issue creation

on:
  issues:
    types: [opened]          # 이슈가 열릴 때마다 실행

# [필수 수정 ①] 푸시·PR 작성을 위해 write 권한 명시
permissions:
  contents: write
  pull-requests: write

jobs:
  create-branch-and-pr:
    runs-on: ubuntu-latest

    steps:
      # --- 저장소 체크아웃 ---
      - name: Check out repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0       # 전체 히스토리 확보

      # --- jq 설치 ---
      - name: Install jq
        run: sudo apt-get -qq update && sudo apt-get -qq install -y jq

      # --- 브랜치 생성 ---
      - name: Set up variables and create branch
        id: create_branch
        run: |
          # ===== 기본 설정 =====
          BASE_BRANCH="main"
          ISSUE_NUMBER=${{ github.event.issue.number }}
          ISSUE_TITLE="${{ github.event.issue.title }}"

          # ===== 라벨 추출 =====
          LABELS=$(jq -r '.issue.labels[].name' "$GITHUB_EVENT_PATH")

          # ===== 라벨 플래그 =====
          HAS_FE=false
          HAS_BE=false
          while IFS= read -r label; do
            case "$label" in
              fe) HAS_FE=true ;;
              be) HAS_BE=true ;;
            esac
          done <<< "$LABELS"

          # ===== 유효성 검사 =====
          if $HAS_FE && $HAS_BE; then
            echo "::error ::'fe'와 'be' 라벨을 동시에 달 수 없습니다. 둘 중 하나만 선택하십시오."
            exit 1
          elif ! $HAS_FE && ! $HAS_BE; then
            echo "::error ::'fe' 또는 'be' 라벨이 필요합니다. 라벨을 추가해 주세요."
            exit 1
          fi

          # ===== 프리픽스 결정 =====
          if $HAS_FE; then
            PREFIX="feat/fe"
          else
            PREFIX="feat/be"
          fi

          # ===== 브랜치 생성 =====
          BRANCH_NAME="${PREFIX}/${ISSUE_NUMBER}"
          echo "BRANCH_NAME=$BRANCH_NAME" >> "$GITHUB_OUTPUT"   # 다음 step에서 사용
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git checkout -b "$BRANCH_NAME" "origin/$BASE_BRANCH"
          git push origin "$BRANCH_NAME"

      # --- Pull Request 자동 생성 ---
      - name: Create pull request
        env:
          GH_TOKEN: ${{ github.token }}   # gh CLI 인증
        run: |
          BRANCH_NAME="${{ steps.create_branch.outputs.BRANCH_NAME }}"
          ISSUE_NUMBER=${{ github.event.issue.number }}
          ISSUE_TITLE="${{ github.event.issue.title }}"
          PR_TITLE="[자동] ${ISSUE_TITLE}"

          PR_BODY=$(cat <<EOF
## 📝 PR 개요

<!-- 이 PR이 어떤 내용인지 간단히 설명해주세요 -->

## 🔍 변경 사항

<!-- 이 PR에서 변경된 내용을 상세히 설명해주세요 -->

- [ ] 변경 사항 1
- [ ] 변경 사항 2
- [ ] 변경 사항 3

## 🧪 테스트

<!-- 테스트한 내용을 설명해주세요 -->

- [ ] 테스트 케이스 1
- [ ] 테스트 케이스 2

## 📸 스크린샷

<!-- UI 변경이 있는 경우, 스크린샷을 첨부해주세요 -->

## 🔗 관련 이슈

<!-- 관련된 이슈 번호를 입력해주세요 -->

Closes #${ISSUE_NUMBER}

## 📝 추가 설명

<!-- 추가로 설명이 필요한 사항이 있다면 작성해주세요 -->
EOF
)

          # gh CLI가 없으면 설치
          if ! command -v gh &> /dev/null; then
            sudo apt-get -qq update && sudo apt-get -qq install -y gh
          fi

          # --- 중복 PR 방지 로직 ---
          if gh pr view "$BRANCH_NAME" --json number &>/dev/null; then
            echo "PR already exists for branch '$BRANCH_NAME'. Skipping creation."
            exit 0
          fi
          # -------------------------

          gh pr create \
            --title "$PR_TITLE" \
            --body  "$PR_BODY" \
            --base  "main" \
            --head  "$BRANCH_NAME"

            
